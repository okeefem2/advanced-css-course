/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* Universal selector to reset */
*,
*::before,
*::after {
    margin: 0;
    padding: 0;
    box-sizing: inherit;
}

html {
    /*
        Sets the root font size, it is better to not use px because 
        that overrides any font size set by the user 
    */
    font-size: 62.5%;
}
/* Set font properties for body since this is the parent of all elements, and font is inherited */
body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    line-height: 1.7;
    color: #777;
    padding: 0 2rem 2rem 2rem;
    /* padding and border are not added to total height for an element */
    box-sizing: border-box;
}

.header {
    position: relative;
    /* ^ Setting this to relative makes it so that absolute children use this as an origin/reference */
    height: 95vh;
    /* ^ height should always be 95% of the viewport */
    background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)),url('../img/hero.jpg');
    /* ^ the gradient will be on top here when set first, and moves along the gradient to the right bottom */
    background-size: cover;
    /* ^ fit to the viewport width */
    background-position: top;
    /* ^ whatever the viewport size is, the top of the image stays up at the top, where the rest might start to scale/crop */
    clip-path: polygon(0 0, 100% 0 , 100% 75vh, 0 100%);
    /* need the four corners of where the image should be visible */
}

.header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem;
}

.header__logo {
    height: 3.5rem;
}

.header__logo:hover {
    cursor: pointer;
    opacity: 0.8;
}

.header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    /* set the top and left to 40/50% of parent (because of absolute position) then shift to the left and up 50% width/height of the element */
    /* This will align the button center in this element because it is an inline-block */
    text-align: center;
}

.heading-primary {
    color: #fff;
    text-transform: uppercase;
    /* this prop helps with shakey animations */
    backface-visibility: hidden;
    margin-bottom: 6rem;
}
.heading-primary span {
    display: block;
}
/* block elements take up the full width available and create line breaks after and before */

.heading-primary--main {
    font-size: 6rem;
    letter-spacing: 3.5rem;
    font-weight: 400;
    animation-name: moveInLeft;
    animation-duration: 3s;
    animation-timing-function: ease-out;
    /*
    animation-delay: 1s;
    animation-iteration-count: 3;
    */
} 

.heading-primary--sub {
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation-name: moveInRight;
    animation-duration: 3s;
    animation-timing-function: ease-out;
}

@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-10rem);
    }

    80% {
        opacity: 0.8;
        transform: translateX(1rem);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(10rem);
    }

    80% {
        opacity: 0.8;
        transform: translateX(-1rem);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

/* 
pseudo classes are used to style under special condition 
link is for when the element is an anchor
visited is when the user has visited that link before
*/
.btn:link,
.btn:visited {
    font-size: 1.6rem;
    text-transform: uppercase;
    text-decoration: none;
    /* treated as if it where text */
    display: inline-block;
    border-radius: 10rem;
    /* initial state, define that there can be a transition on all properties and the time */
    transition: all .2s;
    position: relative;
}

.btn:hover {
    transform: translateY(-0.3rem);
    /* offset x offset y blur and color, higher blur makes it look higher off the page */
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
}

.btn:active {
    transform: translateY(-0.1rem);
    box-shadow: 0 1rem 1rem rgba(0, 0, 0, 0.15);
}

.btn--white {
    background-color: #fff;
    color: #777;
    padding: 1.5rem 4rem;
}

/* 
    pseudo elements are basically treated like children 
    so width/height 100% are relative to the element itself
*/
.btn::after {
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /* Pos will be absolute to the first relative pos it finds above it */
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all 0.4s;
}

.btn--white::after {
    background-color: #fff;
}

.btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0;
}

.btn--animated {
    animation: moveInButtonBottom 1s ease-out 1s;
    animation-fill-mode: backwards;
}
@keyframes moveInButtonBottom {
    0% {
        opacity: 0;
        transform: translateY(10rem);
    }

    100% {
        opacity: 1;
        transform: translateY(0);
    }
}