* {
    margin: 0;
    padding: 0;
}

$color-primary: #f9ed69;
$color-secondary: #f08a5d;
$color-tertiary: #b83b5e;
$color-text-dark: #333;
$color-text-light: #eee;

$width-button: 150px;

@mixin style-link-text($color) {
    text-decoration: none;
    text-transform: uppercase;
    color: $color;
}

@mixin clearfix {
    &::after {
        content: '';
        clear: both;
        display: table;
    }
}

@function divide($a, $b) {
    @return $a / $b;
}

nav { 
    margin: dive(60, 2) * 1px; // * 1px to translate the # to px
    background-color: $color-primary;
    @include clearfix
}

.navigation {
    list-style: none;
    float: left;

    li {
        display: inline-block; // Make them side by side
        margin-right: 30px;
        &:first-child {
            // & stands in for the selector up to this point
            margin: 0;
        }

        a:link {
            @include style-link-text($color-text-dark);
        }
    }
}

.buttons {
    float: right;
}

%btn-placeholder {
    padding: 10px;
    display: inline-block;
    text-align: center;
    border-radius: 100px;
    width: $width-button;
    @include style-link-text($color-text-light);
}

.btn-main {
    &::link {
        // Using an extend copies the selector to the rule
        // where a mixin copies the code into the selector
        // so extend is better for keeping the compiled css cleaner
        // downside is that it can end up mixing unrelated selectors together
        // which could be kind of weird... so use both in the cases they make sense in
        // Mixins when unrelated selectors share styles
        // Extends when related selectors share styles
        @extend %btn-placeholder;
        background-color: $color-secondary;
    }
    &::hover {
        background-color: darken($color-secondary, 15%);
    }
}

.btn-hot {
    &::link {
        @extend %btn-placeholder;
        background-color: $color-tertiary;
    }
    &::hover {
        background-color: lighten($color-tertiary, 10%);
    }
}